#!/usr/bin/env bash
# -*- tab-width: 4; encoding: utf-8; -*-

## @fn __argsparse_index_of()
## @param value a value
## @param values... array values
## @brief Tells if a value is found in a set of other values.
## @details Look for @a value and print its position in the @a values
## set. Return false if it can not be found.
## @retval 0 if @a value is amongst @a values
## @retval 1 if @a value is not found.
## @ingroup ArgsparseUtils
__argsparse_index_of() {
	[[ $# -ge 2 ]] || return 1
	local key=$1 ; shift
	local index=0
	local elem
	for elem in "$@"
	do
		if [[ "$key" = "$elem" ]]
		then
			printf %s "$index"
			return 0
		fi
		: $((index++))
	done
	return 1
}

## @fn __argsparse_join_array()
## @param c a single char
## @param strings... strings to join
## @brief join multiple strings by a char.
## @details Like the 'str.join' string method in python, join multiple
## strings by a char. Only work with a single char, though.
## @retval 1 if first parameter is invalid.
## @retval 0 else.
## @ingroup ArgsparseUtils
__argsparse_join_array() {
	[[ $# -ge 1 && $1 = ? ]] || return 1
	local IFS="$1$IFS"
	shift
	printf %s "$*"
}


# @private
# @fn __argsparse_max_length()
# @details Prints the length of the longest argument _or_ 50.
# @brief Internal use.
# @param string... a list of strings
# @return 0
__argsparse_max_length() {
	local max=50
	shift
	local max_length=0 str
	for str in "$@"
	do
		max_length=$((max_length>${#str}?max_length:${#str}))
	done
	printf %d "$((max_length>max?max:max_length))"
}


## @fn __argsparse_is_array_declared()
## @param name A potential array name
## @retval 0 if an array named after the parameter does exist
## @ingroup ArgsparseUtils
__argsparse_is_array_declared() {
	[[ $# -eq 1 ]] || return 1
	local array_name=$1
	[[ "$(declare -p "$array_name" 2>/dev/null)" = \
		"declare -"[aA]" $array_name="* ]]
}


## @fn __argsparse_has_array_item()
## @param array_name an array name.
## @param item an item key.
## @retval 0 if an array has been already declared by the name of
## the parameter AND if said array holds given key.
## @ingroup ArgsparseUtils
__argsparse_has_array_item() {
	[[ $# = [12] ]] || return 1
	local array_name=$1
	local index=${2:-@}
	local var="$array_name[$index]"
	(
		set +o nounset
		[[ ${!var+set} = set ]]
	)
}
